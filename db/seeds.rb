# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

User.create!(
  [
    {
      name: 'admin',
      email: 'admin@example.com',
      image: open("#{Rails.root}/public/admin.png"),
      profile: '管理人：本サービスで登録されたユーザの情報を確認、編集ができる。',
      password: 'password', 
      admin: true
    },
    {
      name: 'normal', 
      email: 'normal@example.com', 
      profile: 'ユーザ：登録することで記事投稿機能、いいね機能、記事ストック機能などが利用できる。',
      password: 'password' 
    },
    {
      name: 'mikoto', 
      email: 'mikoto@example.com', 
      image: open("#{Rails.root}/public/m.png"),
      profile: '業務未経験の専門学生。',
      password: 'password' 
    }
  ]
)
Post.create!(
  [
    {
      user_id: 1,
      publish_flg: true,
      thumbnail_image: open("#{Rails.root}/public/admin.png"),
      title: '本サービスについて',
      content: 
'本サービスは、基本的なブログサービスの機能を実装したポートフォリオです。

<a href="https://github.com/MikotoSuganuma/media_app" target="_blank">Github</a>

#### 使用技術
<hr>
- ・Ruby version: 2.7.0 (x86_64-linux)  
- ・Rails version: 5.2.4.1  
- ・Docker 
- ・AWS(EC2,VPC,Route 53,Certificate Manager)

#### アプリ機能
<hr>
#####記事関連
- ・記事一覧表示機能  
- ・記事詳細表示機能 
- ・記事投稿機能 
- ・記事編集機能
- ・記事検索機能
- ・プレビュー機能
- ・下書き機能
- ・記事ストック機能

#####ユーザ関連
- ・管理ユーザ機能
- ・ユーザ登録機能
- ・ユーザ編集機能
- ・ログイン・ログアウト機能'
    },
    {
      user_id: 1,
      publish_flg: true,
      thumbnail_image: open("#{Rails.root}/public/blog_sample_1.jpg"),
      title: 'メディア系ブログサービス',
      content: 
'この記事では本サービスについて説明していきたいと思います。

#ブログサービス
まず本サービスは、ブログを作成・管理する機能を提供するWebサービスです。普通のブログサービスと同様な機能が実装されています。
ここでは主な機能だけ説明していきたいと思います。

####1. 記事一覧
<img src="https://user-images.githubusercontent.com/57606507/78241991-3fe92700-751c-11ea-88b6-68fbb6062fb7.png" height="450px;" />

####2. 記事検索
<img src="https://user-images.githubusercontent.com/57606507/78241997-4081bd80-751c-11ea-9ad5-adb23b1c9346.png" height="450px;" />

####3. 記事詳細表示
<img src="https://user-images.githubusercontent.com/57606507/78242000-411a5400-751c-11ea-9830-d3988be89a1d.png" height="500px;" />

####4. 記事編集
<img src="https://user-images.githubusercontent.com/57606507/78241985-3e1f6380-751c-11ea-81d1-3c1f6396e7da.png" height="600px;" />

####5. 各ユーザ記事一覧
<img src="https://user-images.githubusercontent.com/57606507/78241993-3fe92700-751c-11ea-925d-576c3c62f30e.png" height="425px;" />

####6. 記事下書き
<img src="https://user-images.githubusercontent.com/57606507/78241995-4081bd80-751c-11ea-81b9-6e70b3e20dff.png" height="450px;" />

####7.記事ストック
<img src="https://user-images.githubusercontent.com/57606507/78241989-3f509080-751c-11ea-8a1a-3de9ec8be495.png" height="500px;" />'
    },
    {
      user_id: 1,
      publish_flg: true,
      title: 'マークダウン記法の書き方',
      content: 
'文書を記述するための軽量マークアップ言語のひとつ。ここではよく使うマークダウン記法のみ記述します。
もっと詳しく知りたい方は、[Markdown記法 チートシート-Qiita](https://qiita.com/Qiita/items/c686397e4a0f4f11683d)

######見出し
---

```
# 見出し1
## 見出し2
### 見出し3
#### 見出し4
##### 見出し5
######　見出し6
```

######リスト
---

```
- リスト
- リスト
    - リスト
```

######番号付きリスト
---

```
1. 番号付きリスト
2. 番号付きリスト
    1. 番号付きリスト
```

######強調
---

```
**text**
```

######引用
---

```
> text
>> text
```

######リンク
---

```
[title](http://...)
```

######画像埋め込み
---

```
![alt](http://...)
```

######水平線
---

```
---
```'
    },
    {
      user_id: 2,
      publish_flg: true,
      title: 'IT業界についてまとめてみた',
      content: 
'一般ユーザ：新規登録することで記事投稿機能や記事いいね機能、記事ストック機能などが使えるようになる

IT業界には主にSIerとWeb系に分類されるが、プログラミングという技術が共通しているだけで実際には開発手法、利益構造、カルチャー等様々な面が大きく異なる。

####SIer企業とは
---
主に受託開発を行ってシステム開発をしている企業。顧客の業務を把握し、課題解決のためのコンサルティングから設計、開発、運用・保守までを請け負う。開発手法はウォータフォール型。

#####1. 大分類が存在する

- 　メーカー系　・・・　主にコンピューター関連の製品を製造している

- 　ユーザー系　・・・　銀行、保険会社、商社、電力、鉄道なのどのシステム開発

- 　独立系　・・・　メーカー系やユーザー系以外の企業。ほとんどの企業が独立系

#####2. 特徴

- ・メーカー系やユーザー系は電力や交通等、社会インフラとなりえるような大規模プロジェクトを経験可能
- ・開発方式はウォーターフォール型
- ・上流工程ではSE、下流工程ではPGが開発を行う
- ・多重請負構造という発注を受けた企業が下請けを雇い、その下請けがさらに下請けを雇うという構造。
- ・枯れた技術（時代遅れだが、安定していてノウハウがすでに確立している技術）
- ・年齢層が高い
- ・スタートアップ企業は存在しない
- ・icrosoft系のテクノロジーを使った開発案件が多い
- ・客先常駐が非常に多い

#####3. 主な開発言語
- ・Java
- ・C
- ・C#
- ・C++

以上のことから、「顧客の業務改善」や「大規模プロジェクトのマネジメント」のほうに強い関心がある人はSIer企業のほうが向いている。




####web系企業とは
---
インターネットを活用した発注元の存在しないスケールさせることを前提とした自社サービス。
設計とプログラミングの両方ができるエンジニアの価値が高い。発注者が存在しないので、ヒットしなければ赤字になってしまうので早い開発が求められる。開発手法は主にアジャイル開発。

#####1. 小分類が存在する
- 　ソーシャルゲーム系
- 　EC系　・・・　自社の商品（広義では他社の商品）やサービスを、インターネット上に置いた独自運営のウェブサイトで販売するサイトのこと

- 　アドテク系（ネット広告系）　・・・　インターネット広告技術
- 　メディア系

#####2. web系では「SE/PG」という呼称は存在せず、そのエンジニアが専門としている技術領域で分類
- ・インフラエンジニア
サービスで使うサーバーやネットワークの構築・運用・監視業務等を行う。
高パフォーマンスのサービスを安定して運用していくための様々な作業を行う。

- ・サーバーサイドエンジニア
PHP、Ruby、など様々な言語を使ってサーバー側で動くプログラムを開発する職種

- ・フロントエンドエンジニア
主に「JavaScript」言語を使ってブラウザ側で実行されるプログラムを開発する職種
Web業界の中でも技術進化が最も早い

- ・IOS/Androidエンジニア
iPhoneやAndroid等のスマホやタブレット上で動作するプログラムを開発する職種

- ・フルスタックエンジニア
上記のようなエンジニアの仕事をすべて一人で賄えるような人

- ・機械学習エンジニア
AI開発や機械学習を使った開発を行うエンジニア

#####3. 特徴
- ・開発方式は非ウォーターフォール型
サービスを実際に使ってみてもらわないと分からないので、改善を繰り返す前提で開発を行うためウォーターフォール型では対応できない。

- ・モダン（最近、流行）な技術
- ・年齢層が若い
- ・サービスを大きくスケールする可能性がある
- ・リモートワーク可の企業が増えている
- ・開発マシンはほぼMacbook
- ・勉強会が多く、横のつながりが強い

#####4. 主な開発言語
- ・Ruby
オブジェクト指向のスクリプト言語。主にwebサービスを作るときに使われる。

- ・PHP
WebアプリケーションやWebサービスといった、Web系の何かを作るのに特化している。スクリプト言語。

- ・Python
AI開発や深層学習を行う際に使われる言語。計算・統計処理で使用できるライブラリが豊富。スクリプト言語。

- ・JavaScript
オブジェクト指向のスクリプト言語。Webページの見た目や操作を動的にすることができる。

以上のことから、「テクノロジー」や「プログラミング」に強い関心がある人はWeb系に向いている。ただし、技術進化についていくための勉強がかなり大変。'
    },
    {
      user_id: 2,
      publish_flg: true,
      thumbnail_image: open("https://images-na.ssl-images-amazon.com/images/I/51p6dqvB3lL._SX351_BO1,204,203,200_.jpg"),
      title: '業務未経験者におすすめの技術書',
      content: 
'業務未経験者の方におすすめの技術書についてまとめました。これは私が実際に読んだ技術書の中でよかったものを紹介します。

####プログラミング言語
---
#####[スッキリわかるJava入門 第2版 (スッキリシリーズ)](https://www.amazon.co.jp/dp/484433638X/)
![](https://images-na.ssl-images-amazon.com/images/I/51p6dqvB3lL._SX351_BO1,204,203,200_.jpg)

Javaの技術書。プログラミングを初めて学ぶ際に読んだ。学校ではこれを使ってプログラミングの授業をやっていた。プログラミング言語自体が初めてでもかなりサクサク読めるのでおすすめ。



#####[プロを目指す人のためのRuby入門 言語仕様からテスト駆動開発・デバッグ技法まで (Software Design plusシリーズ)](https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%92%E7%9B%AE%E6%8C%87%E3%81%99%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AERuby%E5%85%A5%E9%96%80-%E8%A8%80%E8%AA%9E%E4%BB%95%E6%A7%98%E3%81%8B%E3%82%89%E3%83%86%E3%82%B9%E3%83%88%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA%E3%83%BB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%8A%80%E6%B3%95%E3%81%BE%E3%81%A7-Software-Design-plus%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA/dp/4774193976/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=Ruby&qid=1585820372&s=books&sr=1-1)
![](https://images-na.ssl-images-amazon.com/images/I/51nY-YLt2ZL._SX395_BO1,204,203,200_.jpg)

Rubyの技術書。内容がかなり濃く、なおかつ分厚い。Rubyを勉強したい方はおそらくこの一冊で十分と思われる。ただし文章が多く、内容は少し難しめなのでプログラミングが初めての方は気合が必要。



#####[よくわかるPHPの教科書 【PHP7対応版】](https://www.amazon.co.jp/%E3%82%88%E3%81%8F%E3%82%8F%E3%81%8B%E3%82%8BPHP%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E3%80%90PHP7%E5%AF%BE%E5%BF%9C%E7%89%88%E3%80%91-%E3%81%9F%E3%81%AB%E3%81%90%E3%81%A1%E3%81%BE%E3%81%93%E3%81%A8/dp/4839964688/ref=sr_1_7?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=php&qid=1585820586&s=books&sr=1-7)
![](https://images-na.ssl-images-amazon.com/images/I/61Iv1ICqt7L._SX387_BO1,204,203,200_.jpg)

PHPの技術書。Web向けの言語なおかつ、学習コストが低いという理由で購入。サーバーサイドの知識だけでなく、SQLの知識も一緒に学べる。この技術書のおかげで、サーバーサイドの基本的な知識と技術が身につけることができた。



####プログラミング・レビュー
---
#####[リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)](https://www.amazon.co.jp/dp/4873115655/)
![](https://images-na.ssl-images-amazon.com/images/I/51MgH8Jmr3L._SX352_BO1,204,203,200_.jpg)

これは業務未経験の人は読まなくても大丈夫だとは思いますが、変数やクラス名の名前の付け方やコードを見やすく書き方をわかりやすく教えてくれます。私はA型で、かなりそういったことが気になるタイプなので大変参考になりました。



####AWS
---
#####[Amazon Web Services 基礎からのネットワーク&サーバー構築 改訂版](https://www.amazon.co.jp/Amazon-Web-Services-%E5%9F%BA%E7%A4%8E%E3%81%8B%E3%82%89%E3%81%AE%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E6%A7%8B%E7%AF%89/dp/4822237443/ref=sr_1_9?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=AWS&qid=1585820114&s=books&sr=1-9)
![](https://images-na.ssl-images-amazon.com/images/I/51KpOuWyhYL._SX385_BO1,204,203,200_.jpg)

ネットワークやクラウドサーバの知識をかなりわかりやすく解説してくれるので、基本的なインフラの知識を身に着けたい方にはかなりおすすめ。



####Docker
---
#####[Docker/Kubernetes 実践コンテナ開発入門](https://www.amazon.co.jp/Docker-Kubernetes-%E5%AE%9F%E8%B7%B5%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80-%E5%B1%B1%E7%94%B0-%E6%98%8E%E6%86%B2/dp/4297100339/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=docker&qid=1585820264&s=books&sr=1-1))
![](https://images-na.ssl-images-amazon.com/images/I/51d69eJQMyL._SX396_BO1,204,203,200_.jpg)

自分にとってはかなり難しく、今でも基本的な部分しか理解できていないが、基礎を身に着けるにはおすすめの技術書。DockerだけでなくKubernetesも学べ、内容も同じくらい濃いので両方学びたい方におすすめ。'
    },
    {
      user_id: 3,
      publish_flg: true,
      title: 'Web業界の技術トレンドは？自分なりに調べてみた',
      content: 
'####Web業界の最近の技術トレンド
- ・AI（機械学習/ディープラーニング）
別名人工知能。アルゴリズムを使って、ある特定の分野に絞り、大量のデータを解析することで、その中に規則性や関係性を見つけ出す手法のこと

- ・ブロックチェーン
みんなで使える台帳のようなもの。主に仮想通貨などで使われる技術。金融機関を介さず、ユーザー同士でシステムを管理し合う構造。取引データの履歴はハッシュ関数で暗号化され、すべての履歴が公開されているため、データの改ざんを防ぐことができる。

- ・IoT
モノのインターネットの訳。モノ（例：車、ドア、家電製品、日常品など）にインターネットをつないで管理する技術。具体的には遠隔制御や遠隔監視、モノ同士のデータの送受信が可能になる。

- ・クラウド
データやアプリの一部がローカルではなく、ネットワーク上に存在している。
ユーザーがインフラやソフトウェアを持たなくても、インターネットを通じて、サービスをどんな機器でも必要な時に利用できる。

####Web業界の今後の技術トレンド

- ・5G
第5世代モバイル通信システム。超高速、多数接続、超低遅延という3つのメリットがある
活用事例：自動運転、遠隔医療、VRなど

- ・no-code 
コードを一切書かずにプロダクトを作ることができるツール。学習コストが低く、かなり短い期間でシステム構築ができる。その反面拡張性が低くカスタマイズ性に欠ける。

- ・low-code
必要最低限のコードの記述でプロダクトを作ることができるツール。no-codeほどではないが、短い期間でシステム構築ができ、no-codeより拡張性が高い。'
    },
    {
      user_id: 3,
      publish_flg: true,
      thumbnail_image: "https://user-images.githubusercontent.com/57606507/84443455-9a200a00-ac7a-11ea-8ec8-4551aafcdff5.png",
      title: 'AWSについて調べてみた？自分なりに調べてみた',
      content: 
'![AWS](https://user-images.githubusercontent.com/57606507/84443455-9a200a00-ac7a-11ea-8ec8-4551aafcdff5.png)

Amazon Web Servicesの略。Amazonにより提供されているクラウドコンピューティングサービス。ウェブサービスに限らない多種多様なインフラストラクチャーサービスを提供している。

####クラウドコンピューティングとは
---
クラウドコンピューティングとは、インターネットを介してサーバー・ストレージ・データベース・ソフトウェアといったコンピューターを使った様々なサービスを利用すること。手元に1台のPCとインターネットに接続できる環境さえあれば、サーバーや大容量のストレージ、高速なデータベースなどを必要な分だけ利用できる。

######AWSのサービス例
- ・サーバー環境構築（EC2）
- ・データ保存（S3）
- ・コンテンツ配信（S3）
- ・データベース利用（RDS）
- ・専用回線（AWS Direct Connect）
- ・セキュリティ対策（Amazon Inspector）
- ・AI活用/データ分析（Amazon Personalize）
- ・ワークフロー管理（Amazon Simple Workflow）
- ・メール/通知（AWS SES）
- ・開発（AWS CodeStar）

######AWSのメリット

- ・コスト面
ハードウェア・ソフトウェアを購入する必要がないので初期費用が抑えられる。また従量制の課金となるため、定額制と比べて無駄なコストが発生しにくい

- ・セキュリティ面
常に最新のセキュリティが施され、さまざまな第三者機関認証を取得したセキュアな環境を利用できる。サービス側で最新化の処理を行ってくれるため、管理者の手間がない。

- ・拡張性
スペック（CPU・メモリ・ストレージ容量などの拡張）が簡単かつスピーディーに行える


######AWSのデメリット

- ・ノウハウ
サービスが100種類以上あり今後も増えると予想される。そのため「これをするにはどのサービスを利用するのが最適か」といった選択を適切に行うところから、相応のノウハウが必要。

- ・コスト
従量制の課金となるため、使い方によっては定額制のサービスと比べ高額になりやすい。また毎月の費用が読みにくく予算化しづらい。'
    },
    {
      user_id: 3,
      publish_flg: true,
      thumbnail_image: "https://user-images.githubusercontent.com/57606507/84443520-bf147d00-ac7a-11ea-901a-e552ad6a4611.jpg",
      title: 'Dockerとは何か？自分なりに調べてみた',
      content: 
'![docker_icon](https://user-images.githubusercontent.com/57606507/84443520-bf147d00-ac7a-11ea-901a-e552ad6a4611.jpg)

コンテナ型の仮想環境を構築する上で欠かせないツール。コンテナ型のアプリケーション実行環境のこと。Linux上で動作する。（WindowsやMacでは裏でLinuxの仮想環境が構築されている）

######特徴
- ・開発環境を共有できる
- ・Docker Hubと呼ばれるレジストリがある
- ・ホストがライブラリやミドルウェアで汚れない

dockerが利用されているサービス
AbemaTV・アメーバブログ・Pokemon Goなど

####そもそも仮想化とは
 ---
VM（仮想マシン）
物理的な環境にとらわれることなく、ハードウェアに含まれるCPU、メモリなどの
リソースを論理的に分割、統合する技術のこと。サーバ、ストレージ、ネットワークなどの仮想化がある。
 
- ・サーバ仮想化
１つのサーバを複数あるように分割し動作させる。

- ・ストレージ仮想化
複数のストレージを仮想的に統合し１つの大きなストレージプールを構成する。

- ・ネットワーク仮想化
物理的なネットワーク機器を仮想化し、様々なコストや作業が効率化する。


######サーバ仮想化のメリット
- ・コスト削減
- ・リソースの有効活用

######サーバ仮想化のデメリット
- ・処理能力が落ちる
- ・障害発生時の影響が大きくなる

######ホストOS・ゲストOS
ホストOSとは仮想マシンにおいて基盤となるOSのこと、ゲストOSとは仮想マシン環境にインストールして稼働するOSのこと。
例：Windows上に仮想マシンを用意し、その中にLinuxをインストールする

####サーバ仮想化の種類
---
主にホスト型、ハイパーバイザー型、コンテナ型の3つの手法がある。
現在の主流はコンテナ型。

#####1. ホスト型
ホストOS上で仮想化ソフトウェアを使い、別のゲストOSを運用する。
仮想化ソフトウェアの例：VMware・Oracle VirtualBoxなど

#####2. ハイパーバイザー型
ホストOSいらない。直接ハードウェア上でハイパーバイザーと呼ばれる仮想化ソフトウェアをインストールして、ハイパーバイザー上で複数のゲストOSを運用する。
仮想化ソフトウェアの例：Hyper-Vなど

#####3. コンテナ型
現在の主流。アプリケーション・ミドルウェア・OSなどのインフラ環境を一つのコンテナとしてまとめる。それぞれのコンテナがホストOSを共有して稼働するため、他の仮想化と比べるとサーバの起動や処理なども高速。ホストOSと異なるOSのコンテナを作ることができない。
仮想化ソフトウェアの例：Dockerなど

######コンテナ仮想化のメリット
- ・ビルド、デプロイも高速
- ・オーバーヘッドが少ない
- ・プラットフォームやハードウェアからの隔離環境
- ・ラップトップで動いているものをそのままサーバに持っていける'
    }
  ]
)

Tag.create!(
  [
    { name: 'Ruby' },
    { name: 'Rails5' },
    { name: 'Docker' },
    { name: 'AWS' },
    { name: 'IT業界' },
    { name: 'IT用語' },
    { name: '初学者' },
    { name: '初心者' },
    { name: '初学者' },
    { name: 'Webサービス' },
    { name: 'マークダウン' }
  ]
)
